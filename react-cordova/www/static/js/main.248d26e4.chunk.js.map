{"version":3,"sources":["../../../staytuned-cordova-sdk/staytuned-cordova-components/dist/esm/index-8d6a90f7.js","../../../staytuned-cordova-sdk/staytuned-cordova-components/dist/esm lazy /^/.*/.entry/.js$/ include: /.entry/.js$/ exclude: /.system/.entry/.js$/ groupOptions: {} namespace object","App.tsx","serviceWorker.ts","../../../staytuned-cordova-sdk/staytuned-cordova-components/loader/index.js","index.tsx","../../../staytuned-cordova-sdk/staytuned-cordova-components/dist/esm/loader.js"],"names":["scopeId","hostTagName","isSvgMode","queuePending","win","window","doc","document","head","plt","$flags$","$resourcesUrl$","jmp","h","raf","requestAnimationFrame","ael","el","eventName","listener","opts","addEventListener","rel","removeEventListener","ce","CustomEvent","promiseResolve","v","Promise","resolve","supportsConstructibleStylesheets","CSSStyleSheet","e","HYDRATED_CSS","rootAppliedStyles","WeakMap","registerStyle","cssText","allowCS","style","styles","get","replace","set","attachStyles","hostRef","cmpMeta","$cmpMeta$","elm","$hostElement$","flags","endAttachStyles","$tagName$","styleContainerNode","mode","hostElm","getScopeId","nodeType","styleElm","appliedStyles","Set","has","createElement","innerHTML","insertBefore","querySelector","add","adoptedStyleSheets","includes","addStyle","shadowRoot","getRootNode","classList","cmp","EMPTY_OBJ","isComplexType","o","nodeName","vnodeData","child","simple","lastSimple","vNodeChildren","walk","c","i","length","Array","isArray","String","$text$","push","newVNode","children","classData","className","class","Object","keys","filter","k","join","vnode","$attrs$","$children$","tag","text","$tag$","$elm$","Host","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","toLowerCase","oldClasses","parseClassList","newClasses","remove","prop","removeProperty","setProperty","isComplex","tagName","n","getAttribute","removeAttribute","setAttribute","slice","parseClassListRegex","value","split","updateElement","oldVnode","newVnode","host","oldVnodeAttrs","newVnodeAttrs","undefined","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","createTextNode","createElementNS","appendChild","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","removeVnodes","updateChildren","oldCh","newCh","node","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","isSameVnode","patch","nextSibling","parentNode","vnode1","vnode2","oldVNode","oldChildren","newChildren","textContent","data","renderVdom","renderFnResults","$vnode$","rootVnode","attachToAncestor","ancestorComponent","$onRenderResolve$","r","scheduleUpdate","isInitialLoad","$ancestorComponent$","writeTask","dispatchHooks","promise","endSchedule","instance","$lazyInstance$","then","safeCall","updateComponent","a","endUpdate","rc","endRender","callRender","map","cb","childrenPromises","postUpdate","postUpdateComponent","all","render","consoleError","endPostUpdate","addHydratedFlag","$onReadyResolve$","appDidLoad","$onInstanceResolve$","nextTick","who","documentElement","name","ev","dispatchEvent","emitEvent","detail","namespace","method","arg","thenFn","setValue","ref","propName","newVal","propValue","propType","getHostRef","oldVal","$instanceValues$","$members$","proxyComponent","Cstr","members","entries","prototype","memberFlags","defineProperty","this","configurable","enumerable","args","$onInstancePromise$","attrNameToPropName","Map","attributeChangedCallback","attrName","_oldValue","observedAttributes","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","fireConnectedCallback","endRegisterStyles","schedule","connectedCallback","endConnected","hasOwnProperty","disconnectedCallback","bootstrapLazy","lazyBundles","appLoadFallback","options","endBootstrap","cmpTags","exclude","customElements","metaCharset","visibilityStyle","deferredConnectedCallbacks","isBootstrapping","assign","URL","resourcesUrl","baseURI","href","lazyBundle","compactMeta","$listeners$","HostElement","self","registerHost","attachShadow","clearTimeout","$onReadyPromise$","HTMLElement","$lazyBundleId$","define","firstChild","setTimeout","hostRefs","registerInstance","lazyInstance","console","error","cmpModules","exportName","bundleId","module","importedModule","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","performance","now","webpackAsyncContext","req","__webpack_require__","Error","code","ids","id","exports","App","props","myRef","React","createRef","state","sections","currentContent","currentTrack","STSections","getInstance","getSections","setState","catch","err","dir","current","setOnTrackClick","t","body","section","linkedContents","content","JSON","stringify","onClick","STContents","getContent","key","Component","Boolean","location","hostname","match","Reflect","construct","constructor","setPrototypeOf","renderReactDom","ReactDOM","StrictMode","getElementById","cordova","Staytuned","init","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.248d26e4.chunk.js","sourcesContent":["const NAMESPACE = 'staytuned-cordova-components';\n\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: h => h(),\n    raf: h => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructibleStylesheets =  /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return true;\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        style.replace(cssText);\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta);\n    let style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if ( !styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle( elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n    if ( flags & 10 /* needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + ( cmp.$tagName$);\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let simple = false;\n    let lastSimple = false;\n    let vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter(k => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if ( memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n        }\n        else if ( memberName === 'style') {\n            // update style attribute, css properties and values\n            {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if ( prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if ( prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if ( ( !isProp ) && memberName[0] === 'o' && memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        let n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                            // tslint:disable-next-line: triple-equals\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    let newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    if ( newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else {\n        if ( !isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = ( doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS,  newVNode.$tag$)\n            );\n        if ( isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if ( isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    return elm;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ( parentElm);\n    let childNode;\n    if ( containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode,  before);\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if ( newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        return true;\n    }\n    return false;\n};\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    if ( text === null) {\n        {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        // element node\n        {\n            {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if ( oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if ( oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if ( oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if ( isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if ( oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = ( hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n};\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if ( ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise(r => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    if ( hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return  writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance =  hostRef.$lazyInstance$ ;\n    let promise;\n    {\n        promise = then(promise, () => safeCall(instance, 'componentWillRender'));\n    }\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if ( isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        {\n            // looks like we've got child nodes to render into this host element\n            // or we need to update the css class/attrs on the host element\n            // DOM WRITE!\n            {\n                renderVdom(hostRef, callRender(hostRef, instance));\n            }\n        }\n    }\n    if ( rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map(cb => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance) => {\n    try {\n        instance =  instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* hasRendered */;\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n    return instance;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => ( elm.classList.add('hydrated') );\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if ( propType & 1 /* String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance =  hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    if (( !(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && newVal !== oldVal) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if ( instance) {\n            if ( (flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if ( cmpMeta.$members$) {\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ( (memberFlags & 31 /* Prop */ || (( flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if ( flags & 1 /* isElementConstructor */ && memberFlags & 64 /* Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        const ref = getHostRef(this);\n                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n                    },\n                });\n            }\n        });\n        if ( ( flags & 1 /* isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ( (hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if ( !Cstr.isProxied) {\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        if ( Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if ( ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the intial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    {\n        safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */;\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (\n                        ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if ( cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // fire off connectedCallback() on component instance\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        endConnected();\n    }\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const instance =  hostRef.$lazyInstance$ ;\n        {\n            safeCall(instance, 'disconnectedCallback');\n        }\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map(lazyBundle => lazyBundle[1].map(compactMeta => {\n        const cmpMeta = {\n            $flags$: compactMeta[0],\n            $tagName$: compactMeta[1],\n            $members$: compactMeta[2],\n            $listeners$: compactMeta[3],\n        };\n        {\n            cmpMeta.$members$ = compactMeta[2];\n        }\n        const tagName =  cmpMeta.$tagName$;\n        const HostElement = class extends HTMLElement {\n            // StencilLazyHost\n            constructor(self) {\n                // @ts-ignore\n                super(self);\n                self = this;\n                registerHost(self, cmpMeta);\n                if ( cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                    // this component is using shadow dom\n                    // and this browser supports shadow dom\n                    // add the read-only property \"shadowRoot\" to the host element\n                    // adding the shadow root build conditionals to minimize runtime\n                    {\n                        {\n                            self.attachShadow({ mode: 'open' });\n                        }\n                    }\n                }\n            }\n            connectedCallback() {\n                if (appLoadFallback) {\n                    clearTimeout(appLoadFallback);\n                    appLoadFallback = null;\n                }\n                if (isBootstrapping) {\n                    // connectedCallback will be processed once all components have been registered\n                    deferredConnectedCallbacks.push(this);\n                }\n                else {\n                    plt.jmp(() => connectedCallback(this));\n                }\n            }\n            disconnectedCallback() {\n                plt.jmp(() => disconnectedCallback(this));\n            }\n            componentOnReady() {\n                return getHostRef(this).$onReadyPromise$;\n            }\n        };\n        cmpMeta.$lazyBundleId$ = lazyBundle[0];\n        if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n            cmpTags.push(tagName);\n            customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n        }\n    }));\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map(host => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onInstancePromise$ = new Promise(r => (hostRef.$onInstanceResolve$ = r));\n    }\n    {\n        hostRef.$onReadyPromise$ = new Promise(r => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e) => console.error(e);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module =  cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    return import(\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${ ''}`).then(importedModule => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { bootstrapLazy as b, h, promiseResolve as p, registerInstance as r };\n","var map = {\n\t\"./my-component.entry.js\": [\n\t\t30,\n\t\t9\n\t],\n\t\"./st-content-detail.entry.js\": [\n\t\t31,\n\t\t5\n\t],\n\t\"./st-content-widget.entry.js\": [\n\t\t32,\n\t\t7\n\t],\n\t\"./st-ic-pause_2.entry.js\": [\n\t\t33,\n\t\t10\n\t],\n\t\"./st-mini-player.entry.js\": [\n\t\t34,\n\t\t8\n\t],\n\t\"./st-track-detail.entry.js\": [\n\t\t35,\n\t\t6\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 28;\nmodule.exports = webpackAsyncContext;","import React from \"react\";\nimport \"./App.css\";\nimport { STContent, STContentLight, STContents, STPlayer, STSection, STSections, STTrack } from \"@staytuned-io/cordova-typescript\";\n\nexport default class App extends React.Component {\n    public myRef: React.RefObject<any> = React.createRef();\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            sections: [],\n            currentContent: undefined,\n            currentTrack: undefined,\n        };\n        STSections.getInstance()\n            .getSections()\n            .then((sections: STSection[]) => {\n                this.setState({ sections: sections });\n            })\n            .catch((err) => {\n                console.dir(\"Error while gettings sections\", err);\n            });\n    }\n\n    componentDidUpdate() {\n        this.myRef.current?.setOnTrackClick((t: STTrack) => {\n            this.setState({ currentTrack: t });\n        });\n    }\n\n    render() {\n        const sections = (this.state as any).sections;\n        const currentContent = (this.state as any).currentContent;\n        const currentTrack = (this.state as any).currentTrack;\n\n        let body = sections.map((section: STSection, i: number) => {\n            return (\n                <div>\n                    <h2>{section.name}</h2>\n                    <div className=\"horizontal-scroll\">\n                        {section?.linkedContents?.map((content: STContentLight, i: number) => {\n                            return (\n                                <div className=\"content-widget\">\n                                    <st-content-widget\n                                        data={JSON.stringify(content)}\n                                        onClick={() => {\n                                            STContents.getInstance()\n                                                .getContent(content.key!)\n                                                .then((c: STContent) => {\n                                                    this.setState({ currentContent: c });\n                                                });\n                                        }}\n                                    ></st-content-widget>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            );\n        });\n\n        if (currentTrack) {\n            body = (\n                <div>\n                    <button\n                        onClick={() => {\n                            this.setState({ currentTrack: undefined });\n                        }}\n                    >\n                        Previous\n                    </button>\n                    <st-track-detail data={JSON.stringify(currentTrack)}></st-track-detail>\n                </div>\n            );\n        } else if (currentContent) {\n            body = (\n                <div>\n                    <button\n                        onClick={() => {\n                            this.setState({ currentContent: undefined });\n                        }}\n                    >\n                        Previous\n                    </button>\n                    <st-content-detail data={JSON.stringify(currentContent)} ref={this.myRef}></st-content-detail>\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header flex-1\">\n                    <div>{body}</div>\n                </header>\n                <st-mini-player></st-mini-player>\n            </div>\n        );\n    }\n}\n\ndeclare global {\n    namespace JSX {\n        interface IntrinsicElements {\n            \"st-mini-player\": React.DetailedHTMLProps<any, HTMLElement>;\n            \"st-content-detail\": React.DetailedHTMLProps<any, HTMLElement>;\n            \"st-track-detail\": React.DetailedHTMLProps<any, HTMLElement>;\n            \"st-content-widget\": React.DetailedHTMLProps<any, HTMLElement>;\n        }\n    }\n}\n\n/*\n                                <div\n                                    className=\"content\"\n                                    onClick={() => {\n                                        STContents.getInstance()\n                                            .getContent(content.key!)\n                                            .then((c: STContent) => {\n                                                this.setState({ currentContent: c });\n                                            });\n                                    }}\n                                >\n                                    <img src={content.imgSrc} height=\"100px\" />\n                                    <div className=\"title\">{content.title}</div>\n                                    <div>{content.author}</div>\n                                </div>\n                                */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\n(function(){if(\"undefined\"!==typeof window&&void 0!==window.Reflect&&void 0!==window.customElements){var a=HTMLElement;window.HTMLElement=function(){return Reflect.construct(a,[],this.constructor)};HTMLElement.prototype=a.prototype;HTMLElement.prototype.constructor=HTMLElement;Object.setPrototypeOf(HTMLElement,a)}})();\nexport * from '../dist/esm/polyfills/index.js';\nexport * from '../dist/esm/loader.js';\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { defineCustomElements } from \"@staytuned-io/cordova-components/loader\";\nimport Staytuned from \"@staytuned-io/cordova-typescript\";\n\nconst renderReactDom = () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>,\n        document.getElementById(\"root\")\n    );\n};\n\nif ((window as any).cordova) {\n    document.addEventListener(\n        \"deviceready\",\n        () => {\n            renderReactDom();\n            Staytuned.getInstance().init(\"de03f2b8-ef81-428e-a20c-fb5becf32cad\", \"dda710aa.74ff4f0a-cf6b-4db1-9345-e88862ca7ce9\");\n        },\n        false\n    );\n} else {\n    renderReactDom();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\ndefineCustomElements();\n","import { p as promiseResolve, b as bootstrapLazy } from './index-8d6a90f7.js';\n\n/*\n Stencil Client Patch Esm v2.0.3 | MIT Licensed | https://stenciljs.com\n */\nconst patchEsm = () => {\n    return promiseResolve();\n};\n\nconst defineCustomElements = (win, options) => {\n  if (typeof window === 'undefined') return Promise.resolve();\n  return patchEsm().then(() => {\n  return bootstrapLazy([[\"st-mini-player\",[[1,\"st-mini-player\",{\"currentTrack\":[32],\"currentContent\":[32],\"currentTime\":[32],\"currentState\":[32]}]]],[\"my-component\",[[1,\"my-component\",{\"first\":[1],\"middle\":[1],\"last\":[1]}]]],[\"st-content-detail\",[[1,\"st-content-detail\",{\"data\":[1],\"currentContent\":[32],\"setOnTrackClick\":[64]}]]],[\"st-content-widget\",[[1,\"st-content-widget\",{\"data\":[1],\"content\":[32],\"currentTrack\":[32],\"currentContent\":[32],\"currentTime\":[32],\"currentState\":[32]}]]],[\"st-track-detail\",[[1,\"st-track-detail\",{\"data\":[1],\"currentTrack\":[32],\"playingTrack\":[32],\"playingState\":[32]}]]],[\"st-ic-pause_2\",[[1,\"st-ic-pause\"],[1,\"st-ic-play\"]]]], options);\n  });\n};\n\nexport { defineCustomElements };\n"],"sourceRoot":""}